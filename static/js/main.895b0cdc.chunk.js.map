{"version":3,"sources":["router/EuiCustomLink.tsx","views/Home.tsx","views/About.tsx","router/index.tsx","App.tsx","serviceWorker.js","index.js"],"names":["isModifiedEvent","event","metaKey","altKey","ctrlKey","shiftKey","isLeftClickEvent","button","EuiCustomLink","to","props","history","useHistory","href","onClick","defaultPrevented","target","getAttribute","preventDefault","push","Home","About","basePath","homePath","aboutPath","RootRoutes","useEffect","className","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4OASMA,EAAkB,SAACC,GAAD,SACnBA,EAAMC,SAAWD,EAAME,QAAUF,EAAMG,SAAWH,EAAMI,WAEvDC,EAAmB,SAACL,GAAD,OAAiC,IAAjBA,EAAMM,QAEhC,SAASC,EAAT,GAA8D,IAArCC,EAAoC,EAApCA,GAAOC,EAA6B,sBACpEC,EAAUC,cAqBhB,OAAO,kBAAC,IAAD,iBAAaF,EAAb,CAAoBG,KAAMJ,EAAIK,QAnBrC,SAAiBb,GACXA,EAAMc,kBAKNd,EAAMe,OAAOC,aAAa,YAI1BjB,EAAgBC,IAAWK,EAAiBL,KAKhDA,EAAMiB,iBACNP,EAAQQ,KAAKV,QC/BjB,IAEeW,EAFF,kBAAM,sCCEJC,EAFD,kBAAM,uCCIdC,EAAW,8BACXC,EAAQ,UAAMD,EAAN,KACRE,EAAS,UAAMF,EAAN,UAEA,SAASG,IACtB,IAAMd,EAAUC,cAMhB,OAJAc,qBAAU,WACRf,EAAQQ,KAAKG,KACZ,CAACX,IAGF,6BACE,6BACE,wBAAIgB,UAAU,OACZ,wBAAIA,UAAU,aACZ,kBAACnB,EAAD,CAAeC,GAAIc,GAAnB,SAEF,wBAAII,UAAU,aACZ,kBAACnB,EAAD,CAAeC,GAAIe,GAAnB,WAIJ,8BAEF,0BAAMG,UAAU,WACd,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAMN,EAAUO,UAAWV,IACxC,kBAAC,IAAD,CAAOS,KAAML,EAAWM,UAAWT,MCpB5BU,MARf,WACE,OACE,kBAAC,IAAD,KACE,kBAACN,EAAD,QCIcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.895b0cdc.chunk.js","sourcesContent":["import React from 'react';\nimport { EuiLink, EuiLinkButtonProps } from '@elastic/eui';\nimport { useHistory } from 'react-router';\n\ninterface EuiCustomLinkProps extends EuiLinkButtonProps {\n  to: string;\n}\n\n// Most of the content of this files are from https://github.com/elastic/eui/pull/1976.\nconst isModifiedEvent = (event: any) =>\n  !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n\nconst isLeftClickEvent = (event: any) => event.button === 0;\n\nexport default function EuiCustomLink({ to, ...props }: EuiCustomLinkProps) {\n  const history = useHistory();\n\n  function onClick(event: any) {\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    // If target prop is set (e.g. to \"_blank\"), let browser handle link.\n    if (event.target.getAttribute('target')) {\n      return;\n    }\n\n    if (isModifiedEvent(event) || !isLeftClickEvent(event)) {\n      return;\n    }\n\n    // Prevent regular link behavior, which causes a browser refresh.\n    event.preventDefault();\n    history.push(to);\n  }\n\n  return <EuiLink {...props} href={to} onClick={onClick} />;\n}\n","import React from 'react';\n\nconst Home = () => <div>Home</div>;\n\nexport default Home;\n","import React from 'react';\n\nconst About = () => <div>About</div>;\n\nexport default About;\n","import React, { useEffect } from 'react';\nimport { Route, useHistory } from 'react-router-dom';\nimport EuiCustomLink from './EuiCustomLink';\nimport Home from '../views/Home';\nimport About from '../views/About';\n\nconst basePath = '/elastic-react-router-hooks';\nconst homePath = `${basePath}/`;\nconst aboutPath = `${basePath}/about`;\n\nexport default function RootRoutes() {\n  const history = useHistory();\n\n  useEffect(() => {\n    history.push(basePath);\n  }, [history]);\n\n  return (\n    <div>\n      <nav>\n        <ul className=\"nav\">\n          <li className=\"list-item\">\n            <EuiCustomLink to={homePath}>Home</EuiCustomLink>\n          </li>\n          <li className=\"list-item\">\n            <EuiCustomLink to={aboutPath}>About</EuiCustomLink>\n          </li>\n        </ul>\n\n        <hr />\n      </nav>\n      <main className=\"content\">\n        <Route exact path={homePath} component={Home} />\n        <Route path={aboutPath} component={About} />\n      </main>\n    </div>\n  );\n}\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './App.css';\nimport RootRoutes from './router';\n\nfunction App() {\n  return (\n    <Router>\n      <RootRoutes />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}